{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDataTransferItems = getDataTransferItems;\nexports.fileAccepted = fileAccepted;\nexports.fileMatchSize = fileMatchSize;\nexports.allFilesAccepted = allFilesAccepted;\nexports.onDocumentDragOver = onDocumentDragOver;\nvar supportMultiple = exports.supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;\n\nfunction getDataTransferItems(event) {\n  var dataTransferItemsList = [];\n\n  if (event.dataTransfer) {\n    var dt = event.dataTransfer;\n\n    if (dt.files && dt.files.length) {\n      dataTransferItemsList = dt.files;\n    } else if (dt.items && dt.items.length) {\n      // During the drag even the dataTransfer.files is null\n      // but Chrome implements some drag store, which is accesible via dataTransfer.items\n      return Array.prototype.slice.call(dt.items).filter(function (item) {\n        return item.kind === 'file';\n      });\n    }\n  } else if (event.target && event.target.files) {\n    dataTransferItemsList = event.target.files;\n  } // Convert from DataTransferItemsList to the native Array\n\n\n  return Array.prototype.slice.call(dataTransferItemsList);\n} // Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\n// that MIME type will always be accepted\n\n\nfunction fileAccepted(file, accept) {\n  return file.type === 'application/x-moz-file' || accepts(file, accept);\n}\n\nfunction fileMatchSize(file, maxSize, minSize) {\n  return file.size <= maxSize && file.size >= minSize;\n}\n\nfunction allFilesAccepted(files, accept) {\n  return files.every(function (file) {\n    return fileAccepted(file, accept);\n  });\n} // allow the entire document to be a drag target\n\n\nfunction onDocumentDragOver(e) {\n  e.preventDefault();\n}\n\nfunction accepts(file, acceptedFiles) {\n  if (file && acceptedFiles) {\n    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');\n    var fileName = file.name || '';\n    var mimeType = file.type || '';\n    var baseMimeType = mimeType.replace(/\\/.*$/, '');\n    return acceptedFilesArray.some(function (type) {\n      var validType = type.trim();\n\n      if (validType.charAt(0) === '.') {\n        return fileName.toLowerCase().endsWith(validType.toLowerCase());\n      } else if (/\\/\\*$/.test(validType)) {\n        // This is something like a image/* mime type\n        return baseMimeType === validType.replace(/\\/.*$/, '');\n      }\n\n      return mimeType === validType;\n    });\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/hahahazzry/Desktop/classification-react/node_modules/react-magic-dropzone/build/utils.js"],"names":["Object","defineProperty","exports","value","getDataTransferItems","fileAccepted","fileMatchSize","allFilesAccepted","onDocumentDragOver","supportMultiple","document","createElement","event","dataTransferItemsList","dataTransfer","dt","files","length","items","Array","prototype","slice","call","filter","item","kind","target","file","accept","type","accepts","maxSize","minSize","size","every","e","preventDefault","acceptedFiles","acceptedFilesArray","isArray","split","fileName","name","mimeType","baseMimeType","replace","some","validType","trim","charAt","toLowerCase","endsWith","test"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B;AACAF,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACAH,OAAO,CAACI,aAAR,GAAwBA,aAAxB;AACAJ,OAAO,CAACK,gBAAR,GAA2BA,gBAA3B;AACAL,OAAO,CAACM,kBAAR,GAA6BA,kBAA7B;AACA,IAAIC,eAAe,GAAGP,OAAO,CAACO,eAAR,GAA0B,OAAOC,QAAP,KAAoB,WAApB,IAAmCA,QAAnC,IAA+CA,QAAQ,CAACC,aAAxD,GAAwE,cAAcD,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAtF,GAAwH,IAAxK;;AAEA,SAASP,oBAAT,CAA8BQ,KAA9B,EAAqC;AACnC,MAAIC,qBAAqB,GAAG,EAA5B;;AACA,MAAID,KAAK,CAACE,YAAV,EAAwB;AACtB,QAAIC,EAAE,GAAGH,KAAK,CAACE,YAAf;;AACA,QAAIC,EAAE,CAACC,KAAH,IAAYD,EAAE,CAACC,KAAH,CAASC,MAAzB,EAAiC;AAC/BJ,MAAAA,qBAAqB,GAAGE,EAAE,CAACC,KAA3B;AACD,KAFD,MAEO,IAAID,EAAE,CAACG,KAAH,IAAYH,EAAE,CAACG,KAAH,CAASD,MAAzB,EAAiC;AACtC;AACA;AACA,aAAOE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BP,EAAE,CAACG,KAA9B,EAAqCK,MAArC,CAA4C,UAAUC,IAAV,EAAgB;AACjE,eAAOA,IAAI,CAACC,IAAL,KAAc,MAArB;AACD,OAFM,CAAP;AAGD;AACF,GAXD,MAWO,IAAIb,KAAK,CAACc,MAAN,IAAgBd,KAAK,CAACc,MAAN,CAAaV,KAAjC,EAAwC;AAC7CH,IAAAA,qBAAqB,GAAGD,KAAK,CAACc,MAAN,CAAaV,KAArC;AACD,GAfkC,CAgBnC;;;AACA,SAAOG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,qBAA3B,CAAP;AACD,C,CAED;AACA;;;AACA,SAASR,YAAT,CAAsBsB,IAAtB,EAA4BC,MAA5B,EAAoC;AAClC,SAAOD,IAAI,CAACE,IAAL,KAAc,wBAAd,IAA0CC,OAAO,CAACH,IAAD,EAAOC,MAAP,CAAxD;AACD;;AAED,SAAStB,aAAT,CAAuBqB,IAAvB,EAA6BI,OAA7B,EAAsCC,OAAtC,EAA+C;AAC7C,SAAOL,IAAI,CAACM,IAAL,IAAaF,OAAb,IAAwBJ,IAAI,CAACM,IAAL,IAAaD,OAA5C;AACD;;AAED,SAASzB,gBAAT,CAA0BS,KAA1B,EAAiCY,MAAjC,EAAyC;AACvC,SAAOZ,KAAK,CAACkB,KAAN,CAAY,UAAUP,IAAV,EAAgB;AACjC,WAAOtB,YAAY,CAACsB,IAAD,EAAOC,MAAP,CAAnB;AACD,GAFM,CAAP;AAGD,C,CAED;;;AACA,SAASpB,kBAAT,CAA4B2B,CAA5B,EAA+B;AAC7BA,EAAAA,CAAC,CAACC,cAAF;AACD;;AAED,SAASN,OAAT,CAAiBH,IAAjB,EAAuBU,aAAvB,EAAsC;AACpC,MAAIV,IAAI,IAAIU,aAAZ,EAA2B;AACzB,QAAIC,kBAAkB,GAAGnB,KAAK,CAACoB,OAAN,CAAcF,aAAd,IAA+BA,aAA/B,GAA+CA,aAAa,CAACG,KAAd,CAAoB,GAApB,CAAxE;AACA,QAAIC,QAAQ,GAAGd,IAAI,CAACe,IAAL,IAAa,EAA5B;AACA,QAAIC,QAAQ,GAAGhB,IAAI,CAACE,IAAL,IAAa,EAA5B;AACA,QAAIe,YAAY,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAnB;AAEA,WAAOP,kBAAkB,CAACQ,IAAnB,CAAwB,UAAUjB,IAAV,EAAgB;AAC7C,UAAIkB,SAAS,GAAGlB,IAAI,CAACmB,IAAL,EAAhB;;AACA,UAAID,SAAS,CAACE,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/B,eAAOR,QAAQ,CAACS,WAAT,GAAuBC,QAAvB,CAAgCJ,SAAS,CAACG,WAAV,EAAhC,CAAP;AACD,OAFD,MAEO,IAAI,QAAQE,IAAR,CAAaL,SAAb,CAAJ,EAA6B;AAClC;AACA,eAAOH,YAAY,KAAKG,SAAS,CAACF,OAAV,CAAkB,OAAlB,EAA2B,EAA3B,CAAxB;AACD;;AACD,aAAOF,QAAQ,KAAKI,SAApB;AACD,KATM,CAAP;AAUD;;AACD,SAAO,IAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDataTransferItems = getDataTransferItems;\nexports.fileAccepted = fileAccepted;\nexports.fileMatchSize = fileMatchSize;\nexports.allFilesAccepted = allFilesAccepted;\nexports.onDocumentDragOver = onDocumentDragOver;\nvar supportMultiple = exports.supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;\n\nfunction getDataTransferItems(event) {\n  var dataTransferItemsList = [];\n  if (event.dataTransfer) {\n    var dt = event.dataTransfer;\n    if (dt.files && dt.files.length) {\n      dataTransferItemsList = dt.files;\n    } else if (dt.items && dt.items.length) {\n      // During the drag even the dataTransfer.files is null\n      // but Chrome implements some drag store, which is accesible via dataTransfer.items\n      return Array.prototype.slice.call(dt.items).filter(function (item) {\n        return item.kind === 'file';\n      });\n    }\n  } else if (event.target && event.target.files) {\n    dataTransferItemsList = event.target.files;\n  }\n  // Convert from DataTransferItemsList to the native Array\n  return Array.prototype.slice.call(dataTransferItemsList);\n}\n\n// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\n// that MIME type will always be accepted\nfunction fileAccepted(file, accept) {\n  return file.type === 'application/x-moz-file' || accepts(file, accept);\n}\n\nfunction fileMatchSize(file, maxSize, minSize) {\n  return file.size <= maxSize && file.size >= minSize;\n}\n\nfunction allFilesAccepted(files, accept) {\n  return files.every(function (file) {\n    return fileAccepted(file, accept);\n  });\n}\n\n// allow the entire document to be a drag target\nfunction onDocumentDragOver(e) {\n  e.preventDefault();\n}\n\nfunction accepts(file, acceptedFiles) {\n  if (file && acceptedFiles) {\n    var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(',');\n    var fileName = file.name || '';\n    var mimeType = file.type || '';\n    var baseMimeType = mimeType.replace(/\\/.*$/, '');\n\n    return acceptedFilesArray.some(function (type) {\n      var validType = type.trim();\n      if (validType.charAt(0) === '.') {\n        return fileName.toLowerCase().endsWith(validType.toLowerCase());\n      } else if (/\\/\\*$/.test(validType)) {\n        // This is something like a image/* mime type\n        return baseMimeType === validType.replace(/\\/.*$/, '');\n      }\n      return mimeType === validType;\n    });\n  }\n  return true;\n}"]},"metadata":{},"sourceType":"script"}