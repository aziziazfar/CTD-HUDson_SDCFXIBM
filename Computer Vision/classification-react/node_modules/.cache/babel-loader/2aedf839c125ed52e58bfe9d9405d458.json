{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\hahahazzry\\\\Desktop\\\\classification-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\hahahazzry\\\\Desktop\\\\classification-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\hahahazzry\\\\Desktop\\\\classification-react\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hahahazzry\\\\Desktop\\\\classification-react\\\\src\\\\index.js\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MagicDropzone from \"react-magic-dropzone\";\nimport models from \"@cloud-annotations/models\";\nimport styles from \"./App.module.css\";\nimport \"./styles.css\";\n\nconst getRetinaContext = canvas => {\n  const ctx = canvas.getContext(\"2d\");\n  const scale = window.devicePixelRatio;\n  let width = canvas.width / scale;\n  let height = canvas.height / scale;\n  return {\n    setWidth: w => {\n      width = w;\n      canvas.style.width = w + \"px\";\n      canvas.width = w * scale;\n    },\n    setHeight: h => {\n      height = h;\n      canvas.style.height = h + \"px\";\n      canvas.height = h * scale;\n    },\n    width: width,\n    height: height,\n    clearAll: () => {\n      return ctx.clearRect(0, 0, width * scale, height * scale);\n    },\n    clearRect: (x, y, width, height) => {\n      return ctx.clearRect(x * scale, y * scale, width * scale, height * scale);\n    },\n    setFont: font => {\n      const size = parseInt(font, 10) * scale;\n      const retinaFont = font.replace(/^\\d+px/, size + \"px\");\n      ctx.font = retinaFont;\n    },\n    setTextBaseLine: textBaseline => {\n      ctx.textBaseline = textBaseline;\n    },\n    setStrokeStyle: strokeStyle => {\n      ctx.strokeStyle = strokeStyle;\n    },\n    setLineWidth: lineWidth => {\n      ctx.lineWidth = lineWidth * scale;\n    },\n    strokeRect: (x, y, width, height) => {\n      return ctx.strokeRect(x * scale, y * scale, width * scale, height * scale);\n    },\n    setFillStyle: fillStyle => {\n      ctx.fillStyle = fillStyle;\n    },\n    measureText: text => {\n      const metrics = ctx.measureText(text);\n      return {\n        width: metrics.width / scale,\n        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft / scale,\n        actualBoundingBoxRight: metrics.actualBoundingBoxRight / scale,\n        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent / scale,\n        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent / scale\n      };\n    },\n    fillRect: (x, y, width, height) => {\n      return ctx.fillRect(x * scale, y * scale, width * scale, height * scale);\n    },\n    fillText: (text, x, y) => {\n      return ctx.fillText(text, x * scale, y * scale);\n    }\n  };\n};\n\nconst renderObjectDetection = (ctx, predictions) => {\n  ctx.clearAll(); // Font options.\n\n  const font = \"\".concat(14, \"px 'ibm-plex-sans', Helvetica Neue, Arial, sans-serif\");\n  ctx.setFont(font);\n  ctx.setTextBaseLine(\"top\");\n  const border = 2;\n  const xPadding = 8;\n  const yPadding = 4;\n  const offset = 2;\n  const textHeight = parseInt(font, 10); // base 10\n\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0];\n    const y = prediction.bbox[1];\n    const width = prediction.bbox[2];\n    const height = prediction.bbox[3]; // Draw the bounding box.\n\n    ctx.setStrokeStyle(\"#0062ff\");\n    ctx.setLineWidth(border);\n    ctx.strokeRect(Math.round(x), Math.round(y), Math.round(width), Math.round(height)); // Draw the label background.\n\n    ctx.setFillStyle(\"#0062ff\");\n    const textWidth = ctx.measureText(prediction.label).width;\n    ctx.fillRect(Math.round(x - border / 2), Math.round(y - (textHeight + yPadding) - offset), Math.round(textWidth + xPadding), Math.round(textHeight + yPadding));\n  });\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0];\n    const y = prediction.bbox[1]; // Draw the text last to ensure it's on top.\n\n    ctx.setFillStyle(\"#ffffff\");\n    ctx.fillText(prediction.label, Math.round(x - border / 2 + xPadding / 2), Math.round(y - (textHeight + yPadding) - offset + yPadding / 2));\n  });\n};\n\nconst renderClassification = (ctx, predictions) => {\n  ctx.clearAll();\n  const font = \"\".concat(14, \"px 'ibm-plex-sans', Helvetica Neue, Arial, sans-serif\");\n  const textHeight = parseInt(font, 10); // base 10\n\n  const xPadding = 8;\n  const yPadding = 4;\n  const offset = 2;\n  ctx.setFont(font);\n  ctx.setTextBaseLine(\"top\");\n  predictions.filter(prediction => prediction.score > 0.5).forEach((prediction, i) => {\n    const label = \"\".concat(prediction.label, \" \").concat((prediction.score * 100).toFixed(1), \"%\"); // Draw the label background.\n\n    ctx.setFillStyle(\"#0062ff\");\n    const textWidth = ctx.measureText(label).width;\n    ctx.fillRect(Math.round(xPadding), Math.round(xPadding + i * (textHeight + yPadding + offset)), Math.round(textWidth + xPadding), Math.round(textHeight + yPadding)); // Draw the text last to ensure it's on top.\n\n    ctx.setFillStyle(\"#ffffff\");\n    ctx.fillText(label, Math.round(xPadding + 0 + xPadding / 2), Math.round(xPadding + i * (textHeight + yPadding + offset) + yPadding / 2));\n  });\n};\n\nconst App = () => {\n  const _useState = useState(undefined),\n        _useState2 = _slicedToArray(_useState, 2),\n        model = _useState2[0],\n        setModel = _useState2[1];\n\n  const _useState3 = useState(undefined),\n        _useState4 = _slicedToArray(_useState3, 2),\n        preview = _useState4[0],\n        setPreview = _useState4[1];\n\n  const _useState5 = useState(undefined),\n        _useState6 = _slicedToArray(_useState5, 2),\n        resultsCanvas = _useState6[0],\n        setResultsCanvas = _useState6[1];\n\n  useEffect(() => {\n    models.load(\"/model_web\").then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(model) {\n        var image;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // warm up the model\n              image = new ImageData(1, 1);\n\n              if (!(model.type === \"detection\")) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return model.detect(image);\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return model.classify(image);\n\n            case 8:\n              setModel(model);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }, []);\n  useEffect(() => {\n    setPreview(undefined);\n\n    if (resultsCanvas) {\n      const ctx = getRetinaContext(resultsCanvas);\n      ctx.clearAll();\n      ctx.setWidth(0);\n      ctx.setHeight(0);\n    }\n  }, [model, resultsCanvas]); // if model changes kill preview.\n\n  const onDrop = useCallback((accepted, _, links) => {\n    setPreview(accepted[0].preview || links[0]);\n  }, []);\n  const onImageChange = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var imgWidth, imgHeight, ctx, predictions;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            imgWidth = e.target.clientWidth;\n            imgHeight = e.target.clientHeight;\n            ctx = getRetinaContext(resultsCanvas);\n            ctx.setWidth(imgWidth);\n            ctx.setHeight(imgHeight);\n\n            if (!(model.type === \"detection\")) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.next = 8;\n            return model.detect(e.target);\n\n          case 8:\n            predictions = _context2.sent;\n            renderObjectDetection(ctx, predictions);\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.next = 14;\n            return model.classify(e.target);\n\n          case 14:\n            predictions = _context2.sent;\n            renderClassification(ctx, predictions);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [model, resultsCanvas]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MagicDropzone, {\n    className: styles.dropzone,\n    accept: \"image/jpeg, image/png, .jpg, .jpeg, .png\",\n    multiple: false,\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, preview ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.imageWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"upload preview\",\n    onLoad: onImageChange,\n    className: styles.image,\n    src: preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  })) : model !== undefined ? \"Drag & Drop an Image to Test\" : \"Loading model...\", /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: setResultsCanvas,\n    className: styles.canvas,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 17\n  }\n}), rootElement);","map":{"version":3,"sources":["C:/Users/hahahazzry/Desktop/classification-react/src/index.js"],"names":["React","useState","useCallback","useEffect","ReactDOM","MagicDropzone","models","styles","getRetinaContext","canvas","ctx","getContext","scale","window","devicePixelRatio","width","height","setWidth","w","style","setHeight","h","clearAll","clearRect","x","y","setFont","font","size","parseInt","retinaFont","replace","setTextBaseLine","textBaseline","setStrokeStyle","strokeStyle","setLineWidth","lineWidth","strokeRect","setFillStyle","fillStyle","measureText","text","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","fillRect","fillText","renderObjectDetection","predictions","border","xPadding","yPadding","offset","textHeight","forEach","prediction","bbox","Math","round","textWidth","label","renderClassification","filter","score","i","toFixed","App","undefined","model","setModel","preview","setPreview","resultsCanvas","setResultsCanvas","load","then","image","ImageData","type","detect","classify","onDrop","accepted","_","links","onImageChange","e","imgWidth","target","clientWidth","imgHeight","clientHeight","wrapper","dropzone","imageWrapper","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport MagicDropzone from \"react-magic-dropzone\";\r\nimport models from \"@cloud-annotations/models\";\r\n\r\nimport styles from \"./App.module.css\";\r\nimport \"./styles.css\";\r\n\r\nconst getRetinaContext = canvas => {\r\n  const ctx = canvas.getContext(\"2d\");\r\n  const scale = window.devicePixelRatio;\r\n  let width = canvas.width / scale;\r\n  let height = canvas.height / scale;\r\n  return {\r\n    setWidth: w => {\r\n      width = w;\r\n      canvas.style.width = w + \"px\";\r\n      canvas.width = w * scale;\r\n    },\r\n    setHeight: h => {\r\n      height = h;\r\n      canvas.style.height = h + \"px\";\r\n      canvas.height = h * scale;\r\n    },\r\n    width: width,\r\n    height: height,\r\n    clearAll: () => {\r\n      return ctx.clearRect(0, 0, width * scale, height * scale);\r\n    },\r\n    clearRect: (x, y, width, height) => {\r\n      return ctx.clearRect(x * scale, y * scale, width * scale, height * scale);\r\n    },\r\n    setFont: font => {\r\n      const size = parseInt(font, 10) * scale;\r\n      const retinaFont = font.replace(/^\\d+px/, size + \"px\");\r\n      ctx.font = retinaFont;\r\n    },\r\n    setTextBaseLine: textBaseline => {\r\n      ctx.textBaseline = textBaseline;\r\n    },\r\n    setStrokeStyle: strokeStyle => {\r\n      ctx.strokeStyle = strokeStyle;\r\n    },\r\n    setLineWidth: lineWidth => {\r\n      ctx.lineWidth = lineWidth * scale;\r\n    },\r\n    strokeRect: (x, y, width, height) => {\r\n      return ctx.strokeRect(\r\n        x * scale,\r\n        y * scale,\r\n        width * scale,\r\n        height * scale\r\n      );\r\n    },\r\n    setFillStyle: fillStyle => {\r\n      ctx.fillStyle = fillStyle;\r\n    },\r\n    measureText: text => {\r\n      const metrics = ctx.measureText(text);\r\n      return {\r\n        width: metrics.width / scale,\r\n        actualBoundingBoxLeft: metrics.actualBoundingBoxLeft / scale,\r\n        actualBoundingBoxRight: metrics.actualBoundingBoxRight / scale,\r\n        actualBoundingBoxAscent: metrics.actualBoundingBoxAscent / scale,\r\n        actualBoundingBoxDescent: metrics.actualBoundingBoxDescent / scale\r\n      };\r\n    },\r\n    fillRect: (x, y, width, height) => {\r\n      return ctx.fillRect(x * scale, y * scale, width * scale, height * scale);\r\n    },\r\n    fillText: (text, x, y) => {\r\n      return ctx.fillText(text, x * scale, y * scale);\r\n    }\r\n  };\r\n};\r\n\r\nconst renderObjectDetection = (ctx, predictions) => {\r\n  ctx.clearAll();\r\n  // Font options.\r\n  const font = `${14}px 'ibm-plex-sans', Helvetica Neue, Arial, sans-serif`;\r\n  ctx.setFont(font);\r\n  ctx.setTextBaseLine(\"top\");\r\n  const border = 2;\r\n  const xPadding = 8;\r\n  const yPadding = 4;\r\n  const offset = 2;\r\n  const textHeight = parseInt(font, 10); // base 10\r\n\r\n  predictions.forEach(prediction => {\r\n    const x = prediction.bbox[0];\r\n    const y = prediction.bbox[1];\r\n    const width = prediction.bbox[2];\r\n    const height = prediction.bbox[3];\r\n    // Draw the bounding box.\r\n    ctx.setStrokeStyle(\"#0062ff\");\r\n    ctx.setLineWidth(border);\r\n\r\n    ctx.strokeRect(\r\n      Math.round(x),\r\n      Math.round(y),\r\n      Math.round(width),\r\n      Math.round(height)\r\n    );\r\n    // Draw the label background.\r\n    ctx.setFillStyle(\"#0062ff\");\r\n    const textWidth = ctx.measureText(prediction.label).width;\r\n    ctx.fillRect(\r\n      Math.round(x - border / 2),\r\n      Math.round(y - (textHeight + yPadding) - offset),\r\n      Math.round(textWidth + xPadding),\r\n      Math.round(textHeight + yPadding)\r\n    );\r\n  });\r\n\r\n  predictions.forEach(prediction => {\r\n    const x = prediction.bbox[0];\r\n    const y = prediction.bbox[1];\r\n    // Draw the text last to ensure it's on top.\r\n    ctx.setFillStyle(\"#ffffff\");\r\n    ctx.fillText(\r\n      prediction.label,\r\n      Math.round(x - border / 2 + xPadding / 2),\r\n      Math.round(y - (textHeight + yPadding) - offset + yPadding / 2)\r\n    );\r\n  });\r\n};\r\n\r\nconst renderClassification = (ctx, predictions) => {\r\n  ctx.clearAll();\r\n\r\n  const font = `${14}px 'ibm-plex-sans', Helvetica Neue, Arial, sans-serif`;\r\n  const textHeight = parseInt(font, 10); // base 10\r\n  const xPadding = 8;\r\n  const yPadding = 4;\r\n  const offset = 2;\r\n  ctx.setFont(font);\r\n  ctx.setTextBaseLine(\"top\");\r\n\r\n  predictions\r\n    .filter(prediction => prediction.score > 0.5)\r\n    .forEach((prediction, i) => {\r\n      const label = `${prediction.label} ${(prediction.score * 100).toFixed(\r\n        1\r\n      )}%`;\r\n      // Draw the label background.\r\n      ctx.setFillStyle(\"#0062ff\");\r\n      const textWidth = ctx.measureText(label).width;\r\n      ctx.fillRect(\r\n        Math.round(xPadding),\r\n        Math.round(xPadding + i * (textHeight + yPadding + offset)),\r\n        Math.round(textWidth + xPadding),\r\n        Math.round(textHeight + yPadding)\r\n      );\r\n      // Draw the text last to ensure it's on top.\r\n      ctx.setFillStyle(\"#ffffff\");\r\n      ctx.fillText(\r\n        label,\r\n        Math.round(xPadding + 0 + xPadding / 2),\r\n        Math.round(\r\n          xPadding + i * (textHeight + yPadding + offset) + yPadding / 2\r\n        )\r\n      );\r\n    });\r\n};\r\n\r\nconst App = () => {\r\n  const [model, setModel] = useState(undefined);\r\n  const [preview, setPreview] = useState(undefined);\r\n  const [resultsCanvas, setResultsCanvas] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    models.load(\"/model_web\").then(async model => {\r\n      // warm up the model\r\n      const image = new ImageData(1, 1);\r\n      if (model.type === \"detection\") {\r\n        await model.detect(image);\r\n      } else {\r\n        await model.classify(image);\r\n      }\r\n      setModel(model);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setPreview(undefined);\r\n    if (resultsCanvas) {\r\n      const ctx = getRetinaContext(resultsCanvas);\r\n      ctx.clearAll();\r\n      ctx.setWidth(0);\r\n      ctx.setHeight(0);\r\n    }\r\n  }, [model, resultsCanvas]); // if model changes kill preview.\r\n\r\n  const onDrop = useCallback((accepted, _, links) => {\r\n    setPreview(accepted[0].preview || links[0]);\r\n  }, []);\r\n\r\n  const onImageChange = useCallback(\r\n    async e => {\r\n      const imgWidth = e.target.clientWidth;\r\n      const imgHeight = e.target.clientHeight;\r\n\r\n      const ctx = getRetinaContext(resultsCanvas);\r\n      ctx.setWidth(imgWidth);\r\n      ctx.setHeight(imgHeight);\r\n\r\n      if (model.type === \"detection\") {\r\n        const predictions = await model.detect(e.target);\r\n        renderObjectDetection(ctx, predictions);\r\n      } else {\r\n        const predictions = await model.classify(e.target);\r\n        renderClassification(ctx, predictions);\r\n      }\r\n    },\r\n    [model, resultsCanvas]\r\n  );\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <MagicDropzone\r\n        className={styles.dropzone}\r\n        accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\r\n        multiple={false}\r\n        onDrop={onDrop}\r\n      >\r\n        {preview ? (\r\n          <div className={styles.imageWrapper}>\r\n            <img\r\n              alt=\"upload preview\"\r\n              onLoad={onImageChange}\r\n              className={styles.image}\r\n              src={preview}\r\n            />\r\n          </div>\r\n        ) : model !== undefined ? (\r\n          \"Drag & Drop an Image to Test\"\r\n        ) : (\r\n          \"Loading model...\"\r\n        )}\r\n        <canvas ref={setResultsCanvas} className={styles.canvas} />\r\n      </MagicDropzone>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"]},"metadata":{},"sourceType":"module"}